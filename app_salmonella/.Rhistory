# our estimator seems to be un-biased:
mean(kappa)
kappa_true
# the variance is somewhat larger than what we get from our approximation:
sd(kappa)
approx_sd_kappa
sqrt(p_obs_true*(1 - p_obs_true)/(n_individuals*(1 - p_exp_true)))
approx_sd_kappa
# the variance is somewhat larger than what we get from our approximation:
sd(kappa)
approx_sd_kappa
estimated_approx_sd_kappa <- sqrt(p_obs*(1 - p_obs)/(n_individuals*p_exp))
estimated_approx_sd_kappa
mean(estimated_approx_sd_kappa)
approx_sd_kappa
# the variance is somewhat larger than what we get from our approximation:
sd(kappa)
hist(estimated_approx_sd_kappa)
hist(estimated_approx_sd_kappa, main = paste("Estimates of approximate sd(kappa) from", n_sim, "simulation runs."))
abline(v = sd(kappa))
abline(v = sd(kappa), col = "green")
abline(v = approx_sd_kappa)
devtools::install_github("hrbrmstr/cdcfluview")
sim_ingarch <- function(tau, phi, kappa, lgt){
lgt_total <- lgt + 100
X <- S <- numeric(lgt_total)
for(t in 2:lgt_total){
S[t] <- kappa*X[t - 1] + (1 - phi)*S[t - 1]
X[t] <- rpois(1, phi*S[t] + tau)
}
return(list(X = tail(X, lgt), S = tail(S, lgt)))
}
nu <- 5
phi <- 0.5
nu <- 5
phi <- 0.5
kappa <- 0.5
sim_ingarch(tau = tau, nu = nu, phi = phi)
sim_ingarch(tau = tau, phi = phi, kappa = kappa)
sim_ingarch(tau = tau, phi = phi, kappa = kappa, lgt = 1000)
tau <- 5
phi <- 0.5
kappa <- 0.5
sim_ingarch(tau = tau, phi = phi, kappa = kappa, lgt = 1000)
a <- sim_ingarch(tau = tau, phi = phi, kappa = kappa, lgt = 1000)
hist(a$S)
tau <- 5
phi <- 0.2
kappa <- 0.5
a <- sim_ingarch(tau = tau, phi = phi, kappa = kappa, lgt = 1000)
hist(a$S)
tau <- 5
phi <- 0.8
kappa <- 0.5
a <- sim_ingarch(tau = tau, phi = phi, kappa = kappa, lgt = 1000)
hist(a$S)
min(a$S)
tau <- 5
phi <- 0.8
kappa <- 0.2
a <- sim_ingarch(tau = tau, phi = phi, kappa = kappa, lgt = 1000)
hist(a$S)
sim_ingarch2 <- function(nu, alpha, beta){
lgt_total <- lgt + 100
X <- lambda <- numeric(lgt_total)
for(t in 2:lgt_total){
lambda[t] <- nu + alpha*X[t - 1] + beta*lambda[t - 1]
X[t] <- rpois(1, lambda[t])
}
return(list(X = tail(X, lgt), lambda = tail(lambda, lgt)))
}
nu <- 5
alpha <- 0.5
nu <- 5
alpha <- 0.5
beta <- 0.2
b - sim_ingarch2(nu, alpha, beta, 1000)
nu <- 5
alpha <- 0.5
beta <- 0.2
b <- sim_ingarch2(nu, alpha, beta, 1000)
sim_ingarch2 <- function(nu, alpha, beta, lgt = 1000){
lgt_total <- lgt + 100
X <- lambda <- numeric(lgt_total)
for(t in 2:lgt_total){
lambda[t] <- nu + alpha*X[t - 1] + beta*lambda[t - 1]
X[t] <- rpois(1, lambda[t])
}
return(list(X = tail(X, lgt), lambda = tail(lambda, lgt)))
}
nu <- 5
alpha <- 0.5
beta <- 0.2
b <- sim_ingarch2(nu, alpha, beta, 1000)
b$lambda - (nu/(1 - beta))
nu <- 5
alpha <- 0.2
beta <- 0.6
b <- sim_ingarch2(nu, alpha, beta, 1000)
b$lambda - (nu/(1 - beta))
nu/(1 - beta)
b$lambda
range(b$lambda)
nu <- 5
alpha <- 0.01
beta <- 0.01
b <- sim_ingarch2(nu, alpha, beta, 1000)
b$lambda - (nu/(1 - beta))
nu/(1 - beta)
range(b$lambda)
nu <- 5
alpha <- 0.01
beta <- 0.5
b <- sim_ingarch2(nu, alpha, beta, 1000)
b$lambda - (nu/(1 - beta))
nu/(1 - beta)
range(b$lambda)
lgt_total <- lgt + 100
sim_ingarch <- function(nu, alpha, beta, lgt = 1000){
lgt_total <- lgt + 100
X <- lambda <- numeric(lgt)
X[1] <- lambda[1] <- nu/(1 - alpha - beta)
for(i in 2:lgt_total){
lambda[i] <- nu + alpha*X[i - 1] + beta*lambda[i - 1]
X[i] <- rpois(1, lambda[i])
}
return(tail(X, lgt))
}
nu <- 5
alpha <- 0.5
nu <- 5
alpha <- 0.5
beta <- 0.3
X1 <- sim_ingarch(nu, alpha, beta)
mean(X1)
var(X1)
acf(X1, lag.max = 5)
sim_ingarch2 <- function(tau, phi, kappa, lgt = 1000){
lgt_total <- lgt + 100
I <- rpois(lgt_total, tau)
X <- S <- B <- M <- numeric(lgt_total)
X[1] <- S[1] <- ceiling(nu)
B[1] <- M[1] <- 0
for(i in 2:lgt_total){
S[i] <- S[i - 1] - M[i - 1] + B[i - 1]
M[i] <- rbinom(1, S[i], phi)
X[i] <- I[t] + M[i]
B[i] <- rpois(1, kappa*X[i])
}
return(tail(X, lgt))
}
tau <- 5
phi <- 0.4
tau <- 5
phi <- 0.4
kappa <- 0.8
sim_ingarch2(tau, phi, kappa)
sim_ingarch2 <- function(tau, phi, kappa, lgt = 1000){
lgt_total <- lgt + 100
I <- rpois(lgt_total, tau)
X <- S <- B <- M <- numeric(lgt_total)
X[1] <- S[1] <- ceiling(nu)
B[1] <- M[1] <- 0
for(i in 2:lgt_total){
S[i] <- S[i - 1] - M[i - 1] + B[i - 1]
M[i] <- rbinom(1, S[i], phi)
X[i] <- I[i] + M[i]
B[i] <- rpois(1, kappa*X[i])
}
return(tail(X, lgt))
}
tau <- 5
phi <- 0.4
kappa <- 0.8
sim_ingarch2(tau, phi, kappa)
tau <- nu/(1 - beta)
phi <- 1 - beta
kappa <- alpha/(1 - beta)
X2 <- sim_ingarch2(tau, phi, kappa)
mean(X2)
var(X2)
var(X1)
acf(X2, lag.max = 5)
acf(X2, lag.max = 5, add = TRUE)
acf(X2, lag.max = 5)$scf
acf(X2, lag.max = 5)$acf
as.vector(acf(X2, lag.max = 5)$acf)
as.vector(acf(X1, lag.max = 5)$acf)
X1 <- sim_ingarch(nu, alpha, beta, lgt = 100000)
mean(X1)
var(X1)
as.vector(acf(X1, lag.max = 5)$acf)
X2 <- sim_ingarch2(tau, phi, kappa, lgt = 100000)
mean(X2)
var(X2)
as.vector(acf(X2, lag.max = 5)$acf)
rgeom(10, 0.5)
sim_ingarch3 <- function(tau, phi, kappa, lgt = 1000){
lgt_total <- lgt + 200
I <- rpois(lgt_total, tau)
X <- S <- B <- M <- numeric(lgt_total)
X[1] <- ceiling(nu)
for(i in 1:(lgt_total - 100)){
B[i] <- rpois(1, kappa*X[i])
jumps_i <- rgeom(B[i], phi) + 1
for(j in jumps_i){
X[i + j] <- X[i + j] + 1
}
}
return(X[101:(lgt + 100)])
}
X3 <- sim_ingarch3(tau, phi, kappa, lgt = 1000)
sim_ingarch <- function(nu, alpha, beta, lgt = 1000){
lgt_total <- lgt + 100
X <- lambda <- numeric(lgt)
X[1] <- lambda[1] <- nu/(1 - alpha - beta)
for(i in 2:lgt_total){
lambda[i] <- nu + alpha*X[i - 1] + beta*lambda[i - 1]
X[i] <- rpois(1, lambda[i])
}
return(tail(X, lgt))
}
nu <- 5
alpha <- 0.5
beta <- 0.3
X1 <- sim_ingarch(nu, alpha, beta, lgt = 100000)
mean(X1)
var(X1)
as.vector(acf(X1, lag.max = 5)$acf)
sim_ingarch2 <- function(tau, phi, kappa, lgt = 1000){
lgt_total <- lgt + 100
I <- rpois(lgt_total, tau)
X <- S <- B <- M <- numeric(lgt_total)
X[1] <- S[1] <- ceiling(nu)
B[1] <- M[1] <- 0
for(i in 2:lgt_total){
S[i] <- S[i - 1] - M[i - 1] + B[i - 1]
M[i] <- rbinom(1, S[i], phi)
X[i] <- I[i] + M[i]
B[i] <- rpois(1, kappa*X[i])
}
return(tail(X, lgt))
}
tau <- nu/(1 - beta)
phi <- 1 - beta
kappa <- alpha/(1 - beta)
X2 <- sim_ingarch2(tau, phi, kappa, lgt = 100000)
mean(X2)
var(X2)
as.vector(acf(X2, lag.max = 5)$acf)
sim_ingarch3 <- function(tau, phi, kappa, lgt = 1000){
lgt_total <- lgt + 200
I <- rpois(lgt_total, tau)
X <- S <- B <- M <- numeric(lgt_total)
X[1] <- ceiling(nu)
for(i in 1:(lgt_total - 100)){
B[i] <- rpois(1, kappa*X[i])
jumps_i <- rgeom(B[i], phi) + 1
for(j in jumps_i){
X[i + j] <- X[i + j] + 1
}
}
return(X[101:(lgt + 100)])
}
X3 <- sim_ingarch3(tau, phi, kappa, lgt = 1000)
mean(X3)
sim_ingarch3 <- function(tau, phi, kappa, lgt = 1000){
lgt_total <- lgt + 200
X <- rpois(lgt_total, tau)
B <- numeric(lgt_total)
for(i in 1:(lgt_total - 100)){
B[i] <- rpois(1, kappa*X[i])
jumps_i <- rgeom(B[i], phi) + 1
for(j in jumps_i){
X[i + j] <- X[i + j] + 1
}
}
return(X[101:(lgt + 100)])
}
X3 <- sim_ingarch3(tau, phi, kappa, lgt = 1000)
mean(X3)
var(X3)
as.vector(acf(X3, lag.max = 5)$acf)
X3 <- sim_ingarch3(tau, phi, kappa, lgt = 100000)
mean(X3)
var(X3)
as.vector(acf(X3, lag.max = 5)$acf)
# simulation function for INARMA:
sim_inarma1 <- function(nu, alpha, beta, lgt = 100000){
lgt_total <- lgt + 15
I <- rpois(lgt_total, nu/(1 - beta))
X <- rep(NA, lgt_total); X[1] <- 0
S <- X
for(t in 2:lgt_total){
# version that works:
S[t] <- S[t - 1] + I[t - 1] - rbinom(1, X[t - 1], 1 - alpha/(1 - beta))
X[t] <- I[t] + rbinom(1, S[t], 1 - beta)
}
return(list(X = tail(X, lgt), S = tail(S, lgt), I = tail(I, lgt)))
}
nu <- 5
alpha <- 0.5
beta <- 0.3
sim_inarma1(nu, alpha, beta)
X1 <- sim_inarma1(nu, alpha, beta)$X
mean(X1)
tau <- nu/(1 - beta)
phi <- 1 - beta
kappa <- alpha/(1 - beta)
X <- sim_inarma(tau, phi, kappa)
# simulation function for INARMA:
sim_inarma <- function(tau, phi, kappa, lgt = 100000){
lgt_total <- lgt + 15
I <- rpois(lgt_total, tau)
X <- rep(NA, lgt_total); X[1] <- 0
S <- X
for(t in 2:lgt_total){
# version that works:
S[t] <- S[t - 1] + I[t - 1] - rbinom(1, X[t - 1], 1 - kappa)
X[t] <- I[t] + rbinom(1, S[t], phi)
}
return(list(X = tail(X, lgt), S = tail(S, lgt), I = tail(I, lgt)))
}
tau <- nu/(1 - beta)
phi <- 1 - beta
kappa <- alpha/(1 - beta)
X <- sim_inarma(tau, phi, kappa)
mean(X)
X <- sim_inarma(tau, phi, kappa)$X
mean(X)
acf(X)
acf(X, lag.max = 5)$acf
acf(X1, lag.max = 5)
acf(X1, lag.max = 5)$acf
# new attempt:
sim_inarma2 <- function(nu, alpha, beta){
lgt_total <- lgt + 15
I <- rpois(lgt_total, nu/(1 - beta))
X <- rep(NA, lgt_total); X[1] <- 0
U <- X
for(t in 2:lgt_total){
U[t] <- rbinom(X[t - 1], alpha) + rbinom(U[t - 1], beta)
X[t] <- U[t] + I[t]
}
return(list(X = tail(X, lgt), U = tail(U, lgt)))
}
X2 <- sim_inarma2(nu, alpha, beta)$X
# new attempt:
sim_inarma2 <- function(nu, alpha, beta, lgt  =100000){
lgt_total <- lgt + 15
I <- rpois(lgt_total, nu/(1 - beta))
X <- rep(NA, lgt_total); X[1] <- 0
U <- X
for(t in 2:lgt_total){
U[t] <- rbinom(X[t - 1], alpha) + rbinom(U[t - 1], beta)
X[t] <- U[t] + I[t]
}
return(list(X = tail(X, lgt), U = tail(U, lgt)))
}
X2 <- sim_inarma2(nu, alpha, beta)$X
# new attempt:
sim_inarma2 <- function(nu, alpha, beta, lgt  =100000){
lgt_total <- lgt + 15
I <- rpois(lgt_total, nu/(1 - beta))
X <- rep(NA, lgt_total); X[1] <- 0
U <- X
for(t in 2:lgt_total){
U[t] <- rbinom(1, X[t - 1], alpha) + rbinom(1, U[t - 1], beta)
X[t] <- U[t] + I[t]
}
return(list(X = tail(X, lgt), U = tail(U, lgt)))
}
X2 <- sim_inarma2(nu, alpha, beta)$X
mean(X2)
acf(X2, lag.max = 5)
acf(X2, lag.max = 5)$acf
acf(X, lag.max = 5)$acf
sessionInfo()
setwd("/home/johannes/Documents/Non-Academic_Events/Kantonsschule/intro_to_shiny/app_exchange_rates")
library(rsconnect)
deployApp()
library(hhh4addon)
?hhh4_lag
## a simple univariate example:
data("salmonella.agona")
## convert old "disProg" to new "sts" data class
salmonella <- disProg2sts(salmonella.agona)
# specify and fit model: fixed geometric lag structure
# with weight 0.8 for first lag
# par_lag is the logit of alpha:
par_lag <- log(0.8/(1 - 0.8))
control_salmonella <- list(end = list(f = addSeason2formula(~ 1)),
ar = list(f = addSeason2formula(~ 1)),
family = "NegBinM", subset = 6:312,
par_lag = par_lag)
fit_salmonella <- hhh4_lag(salmonella, control_salmonella)
summary(fit_salmonella)
fit_salmonella$distr_lag
library(surveillance)
fit_salmonella <- hhh4(salmonella, control_salmonella)
pred <- oneStepAhead(fit_salmonella, tp = c(50, 60))
pred
plot(salmonella)
nrow(salmonella@observed)
pred <- oneStepAhead(fit_salmonella, tp = c(300, 312))
salmonella[313, ] <- NA
salmonella@observed
salmonella[1:10]
salmonella[1:10, ]
salmonella[1:312, ]
salmonella[1:313, ]
?sts
salmonella@epoch
# make a larger sts object:
salmonella2 <- sts(observed = rbind(salmonella@observed, NA),
start = salmonella@start)
salmonella@plot(salmonella2)
plot(salmonella2)
salmonella2@observed
control_salmonella <- list(end = list(f = addSeason2formula(~ 1)),
ar = list(f = addSeason2formula(~ 1)),
family = "NegBinM", subset = 6:312,
par_lag = par_lag)
fit_salmonella <- hhh4(salmonella, control_salmonella)
pred <- oneStepAhead(fit_salmonella, tp = 312)
control_salmonella <- list(end = list(f = addSeason2formula(~ 1)),
ar = list(f = addSeason2formula(~ 1)),
family = "NegBinM", subset = 6:310,
par_lag = par_lag)
fit_salmonella <- hhh4(salmonella, control_salmonella)
pred <- oneStepAhead(fit_salmonella, tp = 312)
control_salmonella <- list(end = list(f = addSeason2formula(~ 1)),
ar = list(f = addSeason2formula(~ 1)),
family = "NegBinM", subset = 6:300,
par_lag = par_lag)
fit_salmonella <- hhh4(salmonella, control_salmonella)
pred <- oneStepAhead(fit_salmonella, tp = 312)
fit_salmonella <- hhh4(salmonella2, control_salmonella)
pred <- oneStepAhead(fit_salmonella, tp = 312)
control_salmonella <- list(end = list(f = addSeason2formula(~ 1)),
ar = list(f = addSeason2formula(~ 1)),
family = "NegBinM", subset = 6:312,
par_lag = par_lag)
fit_salmonella <- hhh4(salmonella2, control_salmonella)
pred <- oneStepAhead(fit_salmonella, tp = 312)
control_salmonella <- list(end = list(f = addSeason2formula(~ 1)),
ar = list(f = addSeason2formula(~ 1)),
family = "NegBinM", subset = 6:50,
par_lag = par_lag)
fit_salmonella <- hhh4(salmonella2, control_salmonella)
plot(fit_salmonella)
pred <- oneStepAhead(fit_salmonella, tp = 51)
?oneStepAhead
control_salmonella <- list(end = list(f = addSeason2formula(~ 1)),
ar = list(f = addSeason2formula(~ 1)),
family = "NegBinM", subset = 6:313,
par_lag = par_lag)
fit_salmonella <- hhh4(salmonella2, control_salmonella)
pred <- oneStepAhead(fit_salmonella, tp = 312)
pred
# make a larger sts object:
salmonella2 <- sts(observed = rbind(salmonella@observed, rep(NA, 5)),
start = salmonella@start)
# make a larger sts object:
salmonella2 <- sts(observed = rbind(salmonella@observed,
matrix(NA, ncol = ncol(salmonella@observed),
nrow = 5)),
start = salmonella@start)
# make a larger sts object:
n_rows_to_add <- 5
# make a larger sts object:
n_rows_to_add <- 5
salmonella2 <- sts(observed = rbind(salmonella@observed,
matrix(NA, ncol = ncol(salmonella@observed),
nrow = n_rows_to_add)),
start = salmonella@start)
control_salmonella <- list(end = list(f = addSeason2formula(~ 1)),
ar = list(f = addSeason2formula(~ 1)),
family = "NegBinM", subset = 6:(312 + n_rows_to_add),
par_lag = par_lag)
fit_salmonella <- hhh4(salmonella2, control_salmonella)
pred <- oneStepAhead(fit_salmonella, tp = 312)
pred <- oneStepAhead(fit_salmonella, tp = 312:314)
pred <- oneStepAhead(fit_salmonella, tp = c(312, 314))
pred
predictive_moments(fit_salmonella, t_condition = 312, lgt = 2)
predictive_moments(fit_salmonella, t_condition = 310, lgt = 2)
predictive_moments(fit_salmonella, t_condition = 311, lgt = 2)
predictive_moments(fit_salmonella, t_condition = 312, lgt = 1)
pred
fit_salmonella <- hhh4(salmonella2, control_salmonella)
pred <- oneStepAhead(fit_salmonella, tp = c(312, 314))
pred
predictive_moments(fit_salmonella, t_condition = 312, lgt = 1)
predictive_moments(fit_salmonella, t_condition = 312, lgt = 2)
debug(predictive_moments)
predictive_moments(fit_salmonella, t_condition = 312, lgt = 2)
predictive_moments(fit_salmonella, t_condition = 312, lgt = 2)
meanHHH_temp
predictive_moments(fit_salmonella, t_condition = 312, lgt = 2)
as.vector(meanHHH_temp$mean[subset[-(1:max_lag)], , drop = FALSE])
as.vector(means_from_lambda_tilde[-(1:max_lag), , drop = FALSE])
abs(as.vector(meanHHH_temp$mean[subset[-(1:max_lag)], , drop = FALSE]) - as.vector(means_from_lambda_tilde[-(1:max_lag), , drop = FALSE]))
(abs(as.vector(meanHHH_temp$mean[subset[-(1:max_lag)], , drop = FALSE]) - as.vector(means_from_lambda_tilde[-(1:max_lag), , drop = FALSE])) > 0.00001)
any(abs(as.vector(meanHHH_temp$mean[subset[-(1:max_lag)], , drop = FALSE]) - as.vector(means_from_lambda_tilde[-(1:max_lag), , drop = FALSE])) > 0.00001)
if(NA) print("a")
shiny::runApp()
runApp()
# lade einen der Beispieldatensätze:
salmonella <- data("salmonella.agona")
runApp()
runApp()
